vnote_backup_file_826537664 /home/chengcongyue/文档/vnote_notebooks/chengcongyue/redis/数据结构和对象/字典.md
# 字典
保存键值对的抽象数据结构
字典中,一个键和一个值进行关联,这些关联的键和值就是键值对
字典是哈希键的底层实现之一,
## 字典的实现
字典是使用哈希表作为底层的实现,一个哈希表可以有多个哈希表节点,每个哈希表节点保存了字典中的一个键值对
结构定义
```
typedef struct dictht{
    
    dictEntry **table;
    unsigned long size;
    unsigned long sizemask;
    unsigned long used;
}dictht
```
table是一个数组,每一个数组就是一个指针,指向dictEntry结构的指针.每个dictEntry结构保存这一个键值对
然后我们来看一下哈希表的节点
```
typedef struct dictEntry{
void * key;
union{
  void* val;
  unit64_tu64;
  int64_ts64;}v
  struct dictEntry *next;
}dictEntry;
```
next属性是用来解决冲突的
### redis中字典的实现
```
typedef struct dict{
   dictType *type;
   void *privadata;
   dictht ht[2];
   int trehashidx;
```
![](_v_images/20190511161654015_1484755465.png =660x)
## 哈希算法
在进行运算的时候,先运算出哈希值,在计算出索引值,然后再放入到字典中去
计算哈希值用的是type中的函数
![](_v_images/20190511162323366_898887783.png)
其中hash算法使用的是MurmurHash2,这种算法的优点在于,即便是输入的值是有规律的,也能给出很好的分布性.
## 地址冲突
链地址法
## rehash
当哈希表过大或者过小时,就会进行响应的操作
![](_v_images/20190511163013253_523615612.png =660x)
然后将ht[0]上的所有的键值对rehash到ht[1]上面:重新计算哈希值和索引.
迁移到ht[1]之后,释放ht[0],ht[1]变成ht[0]