vnote_backup_file_826537664 /home/chengcongyue/文档/vnote_notebooks/chengcongyue/java/java基础/继承,实现,抽象类,接口等.md
# 继承
## 知识点1
**在一个子类被创建的时候，首先会在内存中创建一个父类对象，然后在父类对象外部放上子类独有的属性，两者合起来形成一个子类的对象。**
```
所以所谓的继承使子类拥有父类所有的属性和方法其实可以这样理解，子类对象确实拥有父类对象中所有的属性和方法，但是父类对象中的私有属性和方法，子类是无法访问到的，只是拥有，但不能使用。
```
```
就像有些东西你可能拥有，但是你并不能使用。所以子类对象是绝对大于父类对象的，所谓的子类对象只能继承父类非私有的属性及方法的说法是错误的。可以继承，只是无法访问到而已。
```
```
package com.ccy.test13;

import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Method;

class Parent{
    Parent() {
        System.out.println("调用父类构造方法!");
    }
    private static void staticParent() {
        System.out.println("调用父类静态方法");
    }
    private final  void finalParent() {
        System.out.println("调用父类final方法");
    }
    private void printParent(){
        System.out.println("调用父类私有方法");
    }
}
class Child extends Parent {
    public void printChild(){
        System.out.println("调用子类公有方法");
    }
}
public class Test02 {
    public static void main(String[] args) throws Exception {
        //获取子类
        Class clazz = Class.forName("com.ccy.test13.Child");
        //得到父类
        Class superClass = clazz.getSuperclass();
        //得到父类非继承的所以方法
        Method[] methods = superClass.getDeclaredMethods();
        //设置私有方法可以被访问
        AccessibleObject.setAccessible(methods,true);
        for (Method m:methods) {
            System.out.println();
            System.out.println("子类调用方法"+m.getName()+"()的调用结果:" );
            m.invoke(new Child());
        }

    }
}
```
## 知识点2
```
1、Java中一个类不能继承多个具体class。  

2、一个类只可继承自一个具体 class，但可实现多个接口。  
   interface不涉及到实现细节，不与任何存储空间有关连。  
   可以实现合并多个 interface ，达到可向上转型为多种基类的目的。  
   新类可继承自一个具象class，其余继承都得是interfaces。  

3、outer class不可继承自多个具体 class，可在其内部设多个inner class，每个inner class都能各自继承某一实现类。  
   inner class不受限于outer class 是否已经继承自某一实现类。  

4、inner class可以说是多重继承问题的完整解决方案。  
   inner class 可 “继承自多个具象或抽象类”。  
   一个类不能继承自多个一般类。但我们可以让其内部的多个inner class各自继承某一实现类达到类似的目的。
```

非抽象类继承抽象类，必须将抽象类中的方法**重写**，**否则需将方法再次申明为抽象**。所以这个方法还可再次声明为抽象，而不用重写。而用**重载**也错了，**重载**是在同一个类中，重写、覆盖才是在父子类中。
抽象类可以没有抽象方法，接口是完全的抽象，只能出现抽象方法。
抽象类无法实例化，无法创建对象。现实生活中也有抽象类的类子，比如说人类是一个抽象类，无法创建一个叫人类的对象，人继承人类来创建对象。况且抽象类中的抽象方法只有声明，没有主体，如果实例化了，又如何去实现调用呢？
因为类是单继承的，类继承了一个抽象类以后，就不能再继承其他类了
## 知识点3
```
abstract关键字可以修饰类和方法
final类的方法都不能是abstract，因为final类不能有子类
abstract类不能实例化
abstract类的子类必须实现其超类的所有abstract方法(X)可以实现部分,然后子类继续声明为抽象方法
```

## 知识点4
```
方法重写的前提： 必须要存在继承的关系。

方法的重写: 子父类出了同名的函数，这个我们就称作为方法的重写。

什么是时候要使用方法的重写：父类的功能无法满足子类的需求时。

方法重写要注意的事项：
    1.方法重写时， 方法名与形参列表必须一致。
    2.方法重写时，子类的权限修饰符必须要大于或者等于父类的权限修饰符。 (***)
    3.方法重写时，子类的返回值类型必须要小于或者 等于父类的返回值类型。(***)
    4.方法重写时， 子类抛出的异常类型要小于或者等于父类抛出的异常类型。(***)
            Exception(最坏)
            RuntimeException(小坏)

方法的重载：在一个类中 存在两个或者两个 以上的同名函数,称作为方法重载。

方法重载的要求
    1. 函数名要一致。
    2. 形参列表不一致（形参的个数或形参 的类型不一致）
    3. 与返回值类型无关。(***)
```
## 知识点5
### 抽象类和最终类
```
关于抽象类与最终类，下列说法错误的是？
正确答案: D
抽象类能被继承，最终类只能被实例化。(对)
抽象类和最终类都可以被声明使用
抽象类中可以没有抽象方法，最终类中可以没有最终方法
抽象类和最终类被继承时，方法可以被子类覆盖
```
最终类就是被final修饰的类，最终方法就是被final修饰的方法。最终类不能被继承，最终方法不能被重写.

1，抽象类中可以有抽象方法，也可以没有抽象方法。
2，抽象类当然可以被继承，因为它就是用来继承的，
3，继承抽象类，若有抽象方法，则子类必须将其抽象方法实现，
4，抽象类中的非抽象方法可以被重写。

最终类和抽象类正好相反
5，加上final的类就叫最终类，加上final的方法就叫最终方法，
6，最终类中可以有最终方法也可以没有
7，最终类不能有子类，最终方法不能被重写

#### 声明?
这里只是说“声明”，并没有说“实例化”；如果只是声明是可以的，最常见的使用方式就是：
1、父类类型的引用指向子类的对象；
2、 接口类型的引用指向该接口的实现类的对象；
以上两种使用方式也就是所谓的**“向上转型”**。
```
A派生出子类B，B派生出子类C，并且在java源代码中有如下声明：
1.A a0=new A();
2.A a1=new B();
3.A a2=new C();
以下哪个说法是正确的？
```
全部正确,向上转型全部都是无条件的

## 知识点6
```
public interface IService {
String NAME="default";
}
其中的变量可以如下:public static final String NAME=”default”;

```
## 知识点7
```
java接口的方法修饰符可以为？(忽略内部接口)
正确答案: D
private
protected
final
abstract
```
1、抽象类中的抽象方法（其前有abstract修饰）不能用**private、static、synchronized、native**访问修饰符修饰。(**说的是抽象方法**).
原因如下：**抽象方法没有方法体，是用来被继承的，所以不能用private修饰**；
                  **static修饰的方法可以通过类名来访问该方法（即该方法的方法体），抽象方法用static修饰没有意义**；
                  **使用synchronized关键字是为该方法加一个锁。而如果该关键字修饰的方法是static方法。则使用的锁就是class变量的锁。如果是修饰实例方法。则用this变量锁。**
                  但是抽象类不能实例化对象，因为该方法不是在该抽象类中实现的。是在其子类实现的。**所以,锁应该归其子类所有。**所以,抽象方法也就不能用synchronized关键字修饰了；native，这个东西本身就和abstract冲突，他们都是方法的声明，只是一个把方法实现移交给子类，另一个是移交给本地操作系统。如果同时出现，就相当于即把实现移交给子类，又把实现移交给本地操作系统. 


2、**接口是一种特殊的抽象类**，接口中的方法全部是抽象方法（但其前的abstract可以省略），所以抽象类中的抽象方法不能用的访问修饰符这里也不能用。而且**protected**访问修饰符也不能使用，因为接口可以让所有的类去 实现（非继承） ，不只是其子类，要用public去修饰。接口可以去继承一个已有的接口。 
### 抽象类和接口
考察点：抽象类和接口
相同点：都不能被实例化,位于继承树的顶端，都包含抽象方法
不同点：1、设计目的：接口体现的一种规范，类似与整个系统的总纲，制订了系统各模块应该遵循的标准，因此接口不应该经常改变，一旦改变对整个系统是辐射性的。
               抽象类作为多个子类的共同父类，体现的是一种模板式设计，可以当作系统实现过程中的中间产品，已经实现了系统部分功能。
            2、使用不同：（1）接口只能包含抽象方法，抽象类可以包含普通方法。
                                   （2）接口里不能定义静态方法，抽象类可以。
                                   （3）接口只能定义静态常量属性不能定义普通属性，抽象类可以。
                                   （4）接口不包含构造器，抽象类可以（不是用于创建对象而是让子类完成初始化）。
                                   （5）接口里不能包含初始化块，抽象类完全可以。
                                   （6）接口多继承，抽象类但继承（只能有一个直接父类）。
总结：接口所有方法全是抽象方法只能 public abstract修饰 （默认public abstract修饰 ），属性默认public static final修饰。
           抽象类除了包含抽象方法外与普通类无区别。 

## 知识点8
abstract修饰符用来修饰类和成员方法
1：用abstract修饰的类表示抽象类，抽象类位于继承树的抽象层，抽象类不能被实例化。
2：用abstract修饰的方法表示抽象方法,抽象方法没有方法体。抽象方法用来描述系统具有什么功能，但不提供具体的实现。
Abstract是Java中的一个重要关键字，可以用来修饰一个类或者一个方法。 修饰一个方法时，表示该方法只有特征签名（signature），没有具体实现，而是把具体实现留给继承该类的子类。一个类中只要有一个abstract 方法，那么这个类就要被声明为abstract，但是其中可以有非abstract方法。 abstract类可以使得类的设计者能够创建方法的原型，而真正的实现留给使用这个类的人。
## 知识点9
```
对于同一类中的两个方法 , 在判断它们是不是重载方法时 , 肯定不考虑（ ）
参数个数
参数类型
返回值类型
参数顺序
```
选择C
```
重载：类中可以创建多个方法，它们具有相同的名字，但具 有不同的参数和不同的定义。调用方法时通过传递 给它们的不同参数个数和参数类型 给它们的不同参数个数和参数类型 给它们的不同参数个数和参数类型 来决定具体使用哪个方法 ,  这就是多态性。
重写 Overriding 是父类与子类之间多态性的一种表现， 在子类中定义某方法与其父类有相同的名称和参数。
重载 Overloading 是一个类中多态性 的一种表现。
重载的时候，方法名要一样，但是参数类型和个数不一样，返回值类型可以相同 也可以不相同。 无法以 返回型别 作为重载函数的区分标准。而且编译的时候只有返回值不同，会报错。及使不报错，运行时无法区分调用哪个方法
```
```
链接：https://www.nowcoder.com/questionTerminal/830d1dbe2d1a4481ae4f753d77d2e89a
来源：牛客网

方法的重载：
方法重载的定义：同一个类或与他的派生类中，方法名相同，而参数列表不同的方法。其中参数列表不同指的是参数的类型，数量，类型的顺序这三种至少有一种不同。
方法重载与下列无关：
与返回值类型无关；与访问修饰符无关
构造方法也可以重载

方法的重写：
方法的重写的定义：在继承关系的子类中，定义一个与父类相同的方法
判断是否重写的方式：在方法之前加上@ Override
方法重写的特点：
在继承关系的子类中重写父类的方法
重写的方法必须方法名相同，参数列表也相同
重写的方法的返回值类型应该与父类中被重写方法的返回值类型相同或是他的子类类型
重写的方法的访问权限应该与父类中被重写方法的访问权限相同或高于它的访问权限
重写的方法不能抛出比父类更加宽泛的异常
方法重写的注意事项：
构造方法不能被重写，不要问为什么？因为构造方法名必须和类名相同
private修饰的成员方法不能被重写
static修饰的方法不能被重写
final修饰的方法不能被重写
当子类重写了父类中的方法后，子类对象调用该方法时调用的是子类重写后的方法
```
## 知识点10
先继承后实现
## 知识点11
```
根据以下接口和类的定义，要使代码没有语法错误，则类Hero中应该定义方法(    )。

interface Action{  
    void fly();  
}
class Hero implements Action{  //……  }

正确答案: D   你的答案: D (正确)
private void fly(){}
void fly(){}
protected void fly(){}
public void fly(){}
```
void fly();实际上是public abstract void fly(),接口方法默认是public abstract的，且实现该接口的类中对应的方法的可见性不能小于接口方法的可见性，因此也只能是public的。
## 知识点12
```
细说一下重写和重载：
这两个都是多态的一种表现形式。
重载：
    1、 重载是在编译器通过方法中形参的静态类型确定调用方法版本的过程。
    2、 重载是多态在编译期的表现形式
    3、 重载的判定只有两个条件（其他的条件都不能作为判定）：
            1、方法名一致
            2、形参列表不同
重写：
    1、重写在方法运行时，通过调用者的实际类型来确定调用的方法版本。（具体细说，就是子父类中的重写方法在对应的class文件常量池的位置相同，一旦子类没有重写，那么子类的实例就会沿着这个位置往上找，直到找到父类的同名方法）
    2、重写只发生在可见的实例方法中：
            1、静态方法不存在重写，形式上的重写只能说是隐藏。
            2、私有方法也不存在重写，父类中private的方法，子类中就算定义了，就是相当于一个新的方法。
            3、静态方法和实例方法不存在相互重写。
    3、重写满足一个规则：两同两小一大
            1、两同：方法名和形参列表一致
            2、两小：重写方法的返回值（引用类型）和抛出异常，要和被重写方法的返回值（引用类型）和抛出异常相同或者是其子类。注意，一旦返回值是基本数据类型，那么重写方法和被重写方法必须相同，且不存在自动拆装箱的问题。
            3、一大：重写方法的访问修饰符大于等于被重写方法的访问修饰符。
```
## 题1
```
public class Test {  
    public static void main(String [] args){  
        System.out.println(new B().getValue());  
    }  
    static class A{  
        protected int value;  
        public A(int v) {  
            setValue(v);  
        }  
        public void setValue(int value){  
            this.value = value;  
        }  
        public int getValue(){  
            try{  
                value++;  
                return value;  
            } catch(Exception e){  
                System.out.println(e.toString());  
            } finally {  
                this.setValue(value);  
                System.out.println(value);  
            }  
            return value;  
        }  
    }  
    static class B extends A{  
        public B() {  
            super(5);  
            setValue(getValue() - 3);  
        }  
        public void setValue(int value){  
            super.setValue(2 * value);  
        }  
    }  
}  
```
new B().getValue()其中,先执行new B()
```
super(5)----->

 public A(int v) {  
            setValue(v);  
        }  
-----> 其中的setValue(v)执行的是
-----> B的setValue,因为重写了
public void setValue(int value){  
            super.setValue(2 * value);  
        }  
------> 这个时候super(5)执行完毕之后,就是10了
```
然后
```
 setValue(getValue() - 3);  ------>getValue()---->
 public int getValue(){  
            try{  
                value++;  //变成了11
                return value;  //返回的是11,try会对value有一个拷贝
            } catch(Exception e){  
                System.out.println(e.toString());  
            } finally {  
                this.setValue(value);  //11传入,this.setValue就是当前类的setValue,也就是B的setValue然后value就变成了22,打印输出
                System.out.println(value);  
            }  
            return value;  
        }  
```
```
setValue(getValue() - 3)---->setValue(8)----> 变成了16
```
```
调用getValue------打印34
```
```
最后返回的是17,try的拷贝
```
运行结果:22,34,17