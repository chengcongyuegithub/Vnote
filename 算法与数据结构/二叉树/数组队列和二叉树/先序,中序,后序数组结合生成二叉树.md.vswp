vnote_backup_file_826537664 /home/chengcongyue/文档/vnote_notebooks/chengcongyue/算法与数据结构/二叉树/数组队列和二叉树/先序,中序,后序数组结合生成二叉树.md
# 先序,中序,后序数组结合生成二叉树
## 分析
对于先序和中序还有中序和后序生成二叉树,比较容易
直接贴代码
```
public static Node createTree(int[] pre,int preStart,int preEnd,int[] in,int inStart,int inEnd,HashMap<Integer,Integer> map)
    {
        //base case
        if(preStart>preEnd || inStart>inEnd)
        {
            return null;
        }
        Node head=new Node(pre[preStart]);
        int index=map.get(pre[preStart]);

        head.left=createTree(pre,preStart+1,preStart+index-inStart,in,inStart,index-1,map);
        head.right=createTree(pre,preStart+index-inStart+1,preEnd,in,index+1,inEnd,map);

        return head;
    }
```
```
public static Node createTree(int[] pos,int posStart,int posEnd,int[] in,int inStart,int inEnd,HashMap<Integer,Integer> map)
    {
        if(posStart>posEnd) return null;
        Node head=new Node(pos[posEnd]);
        int index=map.get(pos[posEnd]);

        head.left=createTree(pos,posStart,posEnd-(inEnd-index)-1,in,inStart,index-1,map);
        head.right=createTree(pos,posEnd-(inEnd-index),posEnd-1,in,index+1,inEnd,map);

        return head;
    }
```
**注意点:**
**对于四个变量,我们都要使用到,然后就是通过子数组的长度来获取到结果**
```
preStart-inStart+1
posEnd-(inEnd-index)
```

### 先序和后序来生成二叉树
首先判断什么样的树才能够通过先序和后序来构建?
**每一棵树都有左右孩子的时候才能够通过先序和后序来生成二叉树**

也就是最少要数组要有三个元素,才可以使用到先序和后序生成二叉树,然后我们来考虑一下base case
```
[1,2,3]
[2,3,1]
```
对于这个来说,base case返回的就不是null,而是在子数组只剩一个的时候,返回它自己
```
这样的话
1.left=f(pre,1,1,pos,0,0)
1.right=f(pre,2,2,pos,1,1);
```
所以base case 是
```
if(preStart==preEnd) reutrn 当前的值
```
```
 public static Node createTree(int[] pre, int preStart, int preEnd,
                                  int[] pos, int posStart, int posEnd, HashMap<Integer, Integer> map)
    {
        Node node=new Node(pre[preStart]);
        if(preStart==preEnd)//base case
        {
            return node;
        }
        int index=map.get(pre[preStart+1]);

        node.left=createTree(pre,preStart+1,1+index-posStart+preStart,pos,posStart,index,map);
        node.right=createTree(pre,index-posStart+preStart+2,preEnd,pos,index+1,posEnd-1,map);

        return node;
    }
```


