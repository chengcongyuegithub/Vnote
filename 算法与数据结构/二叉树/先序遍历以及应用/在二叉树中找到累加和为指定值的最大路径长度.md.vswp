vnote_backup_file_826537664 /home/chengcongyue/文档/vnote_notebooks/chengcongyue/算法与数据结构/二叉树/先序遍历以及应用/在二叉树中找到累加和为指定值的最大路径长度.md
# 在二叉树中找到累加和为指定值的最大路径长度
我们先来介绍一下题目
![](_v_images/20190508203131396_1152335229.png)
我们要求从head开始,累加和为给定值的最大路径,给出书中的两个例子
![](_v_images/20190508203305442_1393200251.png)
## 分析
这道题其实就是[未排序数组中累加和为给定值的最长子数组](/home/chengcongyue/文档/vnote_notebooks/chengcongyue/算法与数据结构/数组/子数组相关问题
/未排序数组中累加和为给定值的最长子数组.md)的变种,这道题我们用到了先序遍历
### 为什么要使用先序遍历
```
public static void f(Node head)
{
    System.out.print(head.value);
    f(head.left);
    f(head.right);
}
```
十分简单的代码,也很好记,但是我们要了解它更深层的含义.
head不一定是root,它可能是某个树中的任意一个节点,我们当前的f方法就是以当前的f为root,然后进行输出,先输出它的左子树,同样的,它的左子树也是以左子树为root进行遍历.
同理右子树,这样就完成了头节点,左子树,右子树的遍历
当我们两个f都执行完毕之后,我们就要把**当前的这个方法返回给它的父亲,因为它有可能是某个节点的左子树或者右子树**
递归函数就可以理解为这种承上启下的作用.
### 将先序遍历应用到该题上
```
public static int f(....)
{
    //base case 也就是遍历到叶子节点,这个时候一条路径上的可能性就完成了
    if(head==null)
    {
        return maxLen;
    }
    //对于这打印头结点,执行核心逻辑
    int sum=preValue+head.value;
    if(!map.containKey(sum))
    {
         map.put(sum,level);
    }
    if(map.containKey(sum-k)) 
    {
        maxLen=..... 
    }
    maxLen=左子树
    maxLen=右子树
    
    //很关键的一步,我们这个方法要返还给父节点了,我们要把当前的sum给删了,
    return len;
}
```